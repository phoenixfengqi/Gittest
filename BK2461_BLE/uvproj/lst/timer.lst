C51 COMPILER V9.60.0.0   TIMER                                                             12/28/2020 20:25:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\lst\timer.lst) TABS(2) OBJECT(.\timer.obj)

line level    source

   1          
   2          #include "includes.h"
   3          #include "common.h"
   4          
   5          //#include <stdio.h>
   6          //#include "patches.h"
   7          
   8          //#include "driver_gpio.h"
   9          //#include "driver_pwm.h"
  10          
  11          xdata  uint16 time1ms_cnt=0;
  12          
  13          uint8  u10msFlag,u2msFlag,u20msFlag;
  14          
  15          DATA uint8  uMCUTick=0;
  16          DATA uint8  uMCUTicke=0;
  17          DATA uint8 uMCUTiick=0;
  18          
  19          bit b2msFlag=0;
  20          
  21          
  22          void InitSysTimer(void)
  23          {
  24   1      #ifdef    EN_TIMER0
                  CLK_EN_CFG |= 0x40 ;                    // Enable timer clock.
                  DIS_TIMER0INT();                    
                  TR0 = 0; 
                  TF0 = 0;
                  TMOD &= 0xf0;   
                  TMOD |= 0x01;                           //using Timer0 as tick base 
                  TL0 = (TIMER0_100us_CNT & 0x00FF);
                  TH0 = (TIMER0_100us_CNT >> 8);
                  EN_TIMER0INT();                        //enable Timer0 int
                  TR0 = 1;    
              #else
  36   1          CLK_EN_CFG |= 0x40 ;                    // Enable timer clock.
  37   1          DIS_TIMER1INT();    
  38   1          TR1 = 0; 
  39   1          TF1 = 0;
  40   1          TMOD &= 0x0f;   
  41   1          TMOD |= 0x10;                           //using Timer1 as tick base(16bit timer/count)
  42   1          TL1 = TIMER0_2MS_CNT_L8;
  43   1          TH1 = TIMER0_2MS_CNT_H8;
  44   1          EN_TIMER1INT();                         //enable Timer1 int
  45   1          TR1 = 1;        
  46   1      #endif
  47   1      }
  48          
  49          void timer0_int(void) interrupt 1
  50          {
  51   1        TR0 = 0;
  52   1        TL0 = (TIMER0_100us_CNT & 0x00FF);
  53   1        TH0 = (TIMER0_100us_CNT >> 8);    
  54   1        TR0 = 1;
C51 COMPILER V9.60.0.0   TIMER                                                             12/28/2020 20:25:09 PAGE 2   

  55   1        time1ms_cnt++;
  56   1      }
  57          
  58          void et1_isr() interrupt 3          
  59          {                                    //  2ms进入一次中断
  60   1        TR1 = 0; 
  61   1        TF1 = 0;                                // Timer1 overflow flag.
  62   1      
  63   1          TL1 = TIMER0_2MS_CNT_L8;
  64   1          TH1 = TIMER0_2MS_CNT_H8;       
  65   1        TR1 = 1;                                // used 1.16us.       
  66   1        ++uMCUTick ;
  67   1        ++uMCUTicke;
  68   1        ++uMCUTiick;
  69   1      
  70   1          KeyCount++;
  71   1      
  72   1        if(uMCUTicke>= cMCUTickDutye){
  73   2          uMCUTicke = 0;
  74   2          u2msFlag = 0xff;
  75   2        }
  76   1      
  77   1        if(uMCUTiick>=9){
  78   2          uMCUTiick = 0;
  79   2          u20msFlag = 0xff;
  80   2        }
  81   1        if(uMCUTick>= cMCUTickDuty)
  82   1        {                                       // 10ms
  83   2          u10msFlag = 0xff;
  84   2          uMCUTick = 0;
  85   2          
  86   2        }
  87   1      }
  88          
  89          #if UART_ENABLE
  90          void uart_isr() interrupt 4
  91          {
  92   1          static unsigned char bCmdSt = 0;
  93   1          static unsigned char bCmdEd = 1;
  94   1          unsigned char c;
  95   1          unsigned char i;
  96   1          if(RI)
  97   1          {
  98   2              RI = 0;
  99   2              //unsigned char c;
 100   2              c = SBUF0;
 101   2              if( (CMD_START == c) && bCmdEd )
 102   2              {
 103   3                  // just for clean the uart fifo             
 104   3                  for(i=0;i<N_CmdLen;i++)
 105   3                  {
 106   4                      S_CMD[i] = 0;
 107   4                  }
 108   3                  bCmdSt = 1;
 109   3                  bCmdEd = 0;
 110   3                  N_CmdLen = 0;
 111   3              }   
 112   2              
 113   2              if(bCmdSt == 1)
 114   2              {
 115   3                  S_CMD[N_CmdLen] = c;
 116   3                  N_CmdLen++;
C51 COMPILER V9.60.0.0   TIMER                                                             12/28/2020 20:25:09 PAGE 3   

 117   3              }
 118   2              
 119   2              if( (CMD_END == c) && bCmdSt && ( N_CmdLen >= (S_CMD[2]+4) ) )
 120   2              {
 121   3                  bCmdSt = 0;
 122   3                  bCmdEd = 1;
 123   3                  B_CmdOK = 1;
 124   3              }
 125   2          }
 126   1          else if(TI)
 127   1          {
 128   2              TI = 0;
 129   2              if(uart_data_len_send--)
 130   2                  SBUF0 = uart_data_send[uart_data_count_send++];
 131   2          }
 132   1      }
 133          #endif
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    381    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
